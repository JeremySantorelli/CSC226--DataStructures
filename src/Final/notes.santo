
Binary Search Tree

    What is the worst case time complexity for search, insert and delete operations in a general Binary Search Tree?
    
        O(N)

    In delete operation of BST, we need inorder successor (or predecessor) of a node when the node to be deleted has
    both left and right child as non-empty. Which of the following is true about inorder successor needed in delete 
    operation?

        Inorder successor is always either a leaf node or a node with empty left child

    We are given a set of n distinct elements and an unlabeled binary tree with n nodes. In how many ways can we 
    populate the tree with the given set so that it becomes a binary search tree? (GATE CS 2011)

        1

    Which of the following traversal outputs the data in sorted order in a BST?

        inorder()

    If we randomly search one of the keys present in above BST, what would be the expected number of comparisons? 

               10           Level 1
             /    
            5      20       Level 2
           /      /             
          4     15    30    Level 3
               /  
              11            Level 4

        Expected number of comparisons(ENC) = (Σ Level * Elements in Level) / Total Elements

        So...    ENC = (1*1 + 2*2 + 3*3 + 4*1) / 7 = 18/7 = 2.57 

Priority Queue

Reheap up and down -> how they work

Psuedo-Links in Heap -> make sure you know

Sorting -> n^2 methods know how many comparisons will be made. the cost of sorting algorithms.

    Understand how the methods work. This will help answer which one would be best for a type of data.

Hashing -> 

CODING

BST -> Remove from tree.

have all recursive n^2 sorting methods

pseudo-links -> 

If an element is at position index, then  			(pseudo-links) 
    1. If the element is not a root, its parent is at (index – 1) / 2
    2. If the element has a left child, it’s at (index * 2) + 1
    3. If the element has a right child, it’s at (index * 2) + 2 


